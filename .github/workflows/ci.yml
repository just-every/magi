
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint-and-type-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run lint
      - name: Run TypeScript compiler
        run: npm run type-check

  test-and-coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run tests with coverage
        run: npm test -- --coverage
      # Add a step to check coverage threshold if a report is generated
      # This might require a separate action like 'MishaKav/pytest-coverage-comment@main' or 'actions-ecosystem/action-add-license@v1'
      # For now, we'll assume the `npm test` command itself might enforce this if configured in package.json/vitest config.

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build project
        run: npm run build

  smoke-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Create minimal .env file for CI
        run: |
          cp .env.example .env
          # Set minimal required values for CI
          echo "YOUR_NAME=CI" >> .env
          echo "AI_NAME=Magi" >> .env
          echo "DATABASE_HOST=db" >> .env
      - name: Setup Docker volumes for CI
        run: |
          # Create directories
          mkdir -p .magi_home .magi_output .custom_tools
          
          # Create Docker volumes as bind mounts
          docker volume create --driver local --opt type=none --opt o=bind --opt device="$(pwd)/.magi_home" magi_home
          docker volume create --driver local --opt type=none --opt o=bind --opt device="$(pwd)/.magi_output" magi_output
          docker volume create --driver local --opt type=none --opt o=bind --opt device="$(pwd)/.custom_tools" custom_tools
          
          # Set proper permissions (magi user is 1001:1001)
          docker run --rm -v magi_home:/magi_home alpine:latest chown -R 1001:1001 /magi_home
          docker run --rm -v magi_output:/magi_output alpine:latest chown -R 1001:1001 /magi_output
          docker run --rm -v custom_tools:/custom_tools alpine:latest chown -R 1001:1001 /custom_tools
      - name: Build and spin up Docker environment
        run: |
          docker compose up --build -d
      - name: Wait for services to be ready (adjust as needed)
        run: sleep 60 # Give services time to start up
      - name: Run smoke tests
        # This will depend on how smoke tests are implemented.
        # For now, let's assume there's a script or command to run them.
        run: echo "Running smoke tests..." # Replace with actual smoke test command
      - name: Tear down Docker environment
        if: always()
        run: |
          docker compose down
          # Clean up volumes
          docker volume rm magi_home magi_output custom_tools || true
