{
  "root": "magi",
  "summary": "MAGI System is a modular, autonomous AI orchestration framework that coordinates specialized agents through a central Overseer running on Node.js. It uses a persistent chain of thought with intelligent model selection to solve complex tasks with minimal human intervention.",
  "primary_language": "TypeScript",
  "frameworks": [
    "Node.js",
    "React",
    "Express",
    "Socket.IO",
    "Docker",
    "PostgreSQL",
    "Webpack"
  ],
  "entry_points": [
    "controller/src/server/server.ts",
    "controller/src/client/client.tsx",
    "engine/src/magi.ts"
  ],
  "tests": [
    "test/",
    "test/playwright/",
    "engine/src/utils/run_pty.test.ts"
  ],
  "build_commands": [
    "npm run build",
    "npm run build:docker",
    "npm run build:host"
  ],
  "setup_instructions": [
    "cp .env.example .env",
    "npm install",
    "npm run setup",
    "docker compose up -d db"
  ],
  "directories": [
    {
      "path": "controller/",
      "summary": "Gateway between browser UI and Overseer with Express/Socket.IO server and React client",
      "languages": ["TypeScript", "React", "SCSS"],
      "important_files": [
        "src/server/server.ts",
        "src/client/client.tsx",
        "src/server/docker_interface.ts"
      ]
    },
    {
      "path": "engine/",
      "summary": "Core orchestration logic for agents with specialized implementations and model providers",
      "languages": ["TypeScript"],
      "important_files": [
        "src/magi.ts",
        "src/magi_agents/overseer_agent.ts",
        "src/magi_agents/operator_agent.ts",
        "src/code_providers/claude_code.ts",
        "src/code_providers/codex.ts",
        "src/code_providers/gemini_cli.ts"
      ]
    },
    {
      "path": "host/",
      "summary": "Browser bridge for Chrome automation via Chrome DevTools Protocol (CDP)",
      "languages": ["TypeScript"],
      "important_files": [
        "src/browser/browser-control.ts",
        "src/browser/cdp/chrome_cdp_launcher.ts"
      ]
    },
    {
      "path": "db/",
      "summary": "PostgreSQL migrations and schema with pgvector support for embeddings",
      "languages": ["SQL"],
      "important_files": [
        "migrations/2025050700001_initial_schema.sql",
        "migrations/2025051200001_projects_schema.sql"
      ]
    },
    {
      "path": "common/",
      "summary": "Shared TypeScript types and interfaces used across the project",
      "languages": ["TypeScript"],
      "important_files": ["shared-types.ts"]
    },
    {
      "path": "templates/",
      "summary": "Project templates for different types (web-app, desktop-app, game, mobile)",
      "languages": ["TypeScript", "React", "Next.js"],
      "important_files": [
        "web-app/project_map.json",
        "desktop-app/project_map.json",
        "mobile-app/project_map.json"
      ]
    },
    {
      "path": "test/",
      "summary": "Testing utilities including custom tools and Docker test scripts",
      "languages": ["TypeScript", "Bash"],
      "important_files": [
        "magi-docker.sh",
        "tools/design-search.ts",
        "tools/web-browser-actions.ts"
      ]
    }
  ],
  "dependencies": {
    "frontend": [
      "react",
      "react-dom",
      "socket.io-client",
      "bootstrap",
      "marked",
      "ef-infinite-canvas",
      "@xterm/xterm"
    ],
    "backend": [
      "express",
      "socket.io",
      "dockerode",
      "pg",
      "ws",
      "node-telegram-bot-api"
    ],
    "ai": [
      "@anthropic-ai/sdk",
      "openai",
      "@google/genai",
      "chrome-remote-interface"
    ]
  },
  "commands": {
    "setup": "npm run setup",
    "build": {
      "all": "npm run build",
      "docker": "npm run build:docker",
      "controller": "cd controller && npm run build",
      "engine": "cd engine && npm run build",
      "host": "npm run build:host"
    },
    "dev": "npm run dev",
    "test": {
      "unit": "npm test",
      "watch": "npm run test:watch",
      "ui": "npm run test:ui",
      "e2e": "npm run test:e2e",
      "e2e:ui": "npm run test:e2e:ui",
      "tools": "npm run test:tools",
      "js-tools": "npm run test:js-tools"
    },
    "lint": "npm run lint",
    "lint:fix": "npm run lint:fix",
    "browser": {
      "start": "npm run browser:start",
      "kill": "npm run browser:kill",
      "status": "npm run browser:status",
      "toggle": "npm run browser:toggle",
      "clone-profile": "npm run browser:clone-profile",
      "test-connection": "npm run browser:test-connection"
    }
  },
  "important_directories": {
    "controller": {
      "description": "Web UI & container manager",
      "paths": [
        "/controller/src/server",
        "/controller/src/client"
      ]
    },
    "engine": {
      "description": "Agent runtime & model providers",
      "paths": [
        "/engine/src/magi_agents",
        "/engine/src/model_providers",
        "/engine/src/code_providers",
        "/engine/src/utils"
      ]
    },
    "db": {
      "description": "Database migrations",
      "paths": [
        "/db/migrations"
      ]
    },
    "host": {
      "description": "Browser bridge CLI",
      "paths": [
        "/host/src/browser"
      ]
    },
    "common": {
      "description": "Shared types & templates",
      "paths": [
        "/common"
      ]
    },
    "test": {
      "description": "Testing utilities",
      "paths": [
        "/test"
      ]
    },
    "templates": {
      "description": "Project templates",
      "paths": [
        "/templates"
      ]
    }
  },
  "important_files": {
    "docker": [
      "/docker-compose.yml",
      "/controller/docker/Dockerfile",
      "/engine/docker/Dockerfile"
    ],
    "configuration": [
      "/controller/tsconfig.json",
      "/engine/tsconfig.json",
      "/controller/webpack.config.js",
      "/vitest.config.ts"
    ],
    "documentation": [
      "/README.md",
      "/CLAUDE.md",
      "/AGENTS.md",
      "/POSTGRES.md",
      "/docs/CUSTOM_TOOLS.md",
      "/docs/MECH.md",
      "/docs/TESTING.md",
      "/docs/TODO.md"
    ]
  },
  "project_structure": {
    "controller": "Web UI & container manager with React/Express/Socket.IO",
    "task": "Agent runtime & LLM model providers",
    "host": "Browser bridge CLI for Chrome automation",
    "db": "PostgreSQL migrations and schema",
    "common": "Shared TypeScript types",
    "test": "Testing utilities and scripts",
    "templates": "Project templates for new projects",
    "scripts": "Utility scripts for day-to-day operations",
    "docs": "Documentation for various system components"
  },
  "agents": {
    "overseer": "Central coordinator that orchestrates the agent workflow",
    "operator": "Breaks down tasks and assigns them to specialized agents",
    "browser": "Interacts with websites using Chrome automation via CDP",
    "code": "Writes, modifies, and analyzes code across various languages",
    "search": "Performs web searches to gather information",
    "shell": "Executes system commands and scripts",
    "reasoning": "Specializes in complex problem-solving and analysis",
    "summary": "Creates concise summaries of longer content",
    "verifier": "Validates outputs and detects potential errors"
  },
  "model_providers": [
    "Claude (Anthropic)",
    "GPT (OpenAI)",
    "Gemini (Google)",
    "Deepseek",
    "Grok",
    "OpenRouter"
  ],
  "features": {
    "MECH": "Meta-cognition Ensemble Chain-of-thought Hierarchy for intelligent model selection",
    "Custom Tools": "Dynamic tool creation and modification by agents at runtime",
    "Browser Control": "CDP-based browser automation",
    "Multi-provider": "Support for various LLM providers with automatic fallback",
    "Project Templates": "Ready-to-use templates for different project types",
    "Code Providers": "Specialized CLI-based code generation tools (Claude Code, Codex, Gemini CLI)"
  }
}