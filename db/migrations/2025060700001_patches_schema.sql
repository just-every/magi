-- Patches schema - stores git patches for review and application
-- This replaces the need for mirror repos and complex branch management

-- Create the patches table
CREATE TABLE patches (
  id               BIGSERIAL PRIMARY KEY,
  process_id       TEXT        NOT NULL,
  project_id       TEXT        NOT NULL,
  branch_name      TEXT        NOT NULL,
  commit_message   TEXT        NOT NULL,
  patch_content    TEXT        NOT NULL, -- The actual git diff content
  metrics          JSONB,                 -- Risk metrics snapshot
  status           TEXT        NOT NULL DEFAULT 'pending', -- 'pending', 'applied', 'rejected', 'superseded'
  created_at       TIMESTAMPTZ DEFAULT NOW(),
  applied_at       TIMESTAMPTZ,
  applied_by       TEXT,                  -- User who applied the patch
  rejection_reason TEXT,                  -- Reason if rejected
  merge_commit_sha TEXT                   -- SHA if successfully applied
);

-- Create appropriate indexes
CREATE INDEX patches_project_idx ON patches(project_id);
CREATE INDEX patches_process_idx ON patches(process_id);
CREATE INDEX patches_status_idx ON patches(status);
CREATE INDEX patches_created_idx ON patches(created_at DESC);

-- Add table and column comments for documentation
COMMENT ON TABLE patches IS
  'Stores git patches generated by MAGI agents for code review and application. Replaces mirror repos.';

COMMENT ON COLUMN patches.patch_content IS
  'The actual git diff content that can be applied with git apply';
COMMENT ON COLUMN patches.status IS
  'Current status: pending (awaiting review), applied (merged), rejected (not merged), superseded (replaced by newer patch)';
COMMENT ON COLUMN patches.metrics IS
  'Risk metrics calculated at the time of patch creation to help with merge decisions';